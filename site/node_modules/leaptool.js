var util = require('util');
var fs = require('fs');
var path = require('path');
var crypto = require('crypto');
var exec = require('child_process').exec;
var moment = require('moment');

// default setting
exports.getDefaultSetting = function(serverPath) {
    serverPath = path.resolve(serverPath);
    var setting = {
        // web app
        app_name: process.env.LEAPBASE_APP_NAME || 'leapbase',
        website: process.env.LEAPBASE_WEBSITE || 'http://localhost',
        access_check: process.env.LEAPBASE_ACCESS_CHECK || false,
        access_code: process.env.LEAPBASE_ACCESS_CODE || 'password',
        // http/https mode
        http_mode: process.env.LEAPBASE_HTTP_MODE || true,
        http_port: process.env.LEAPBASE_HTTP_PORT || 8080,
        https_mode: process.env.LEAPBASE_HTTPS_MODE || false,
        https_port: process.env.LEAPBASE_HTTPS_PORT || 443,
        https_key: process.env.LEAPBASE_HTTPS_KEY || '',
        https_certificate: process.env.LEAPBASE_HTTPS_CERTIFICATE || '',
        https_root_certificate: process.env.LEAPBASE_HTTPS_ROOT_CERTIFICATE || '',
        https_intermediate_certificate: process.env.LEAPBASE_INTERMEDIATE_CERTIFICATE || '',
        http_to_https: process.env.LEAPBASE_HTTP_TO_HTTPS || false, // redirect http to https
        // path name
        app_modules_name: process.env.LEAPBASE_APP_MODULES || 'app_modules',
        public_name: process.env.LEAPBASE_PUBLIC_NAME || 'public',
        server_path: serverPath, // absolute path to site folder
        www_path: path.join(serverPath, 'public'), // absolute path to public folder
        // database
        database: {
            type: process.env.LEAPBASE_DATABASE_TYPE || '', // mongo
            host: process.env.LEAPBASE_DATABASE_HOST || '', // localhost 
            port: process.env.LEAPBASE_DATABASE_PORT || '', // 27017
            name: process.env.LEAPBASE_DATABASE_NAME || 'leapbase'
        },
        // socketio
        use_socketio: process.env.LEAPBASE_USE_SOCKET_IO || false,
        // email setting
        email: {
            service: process.env.LEAPBASE_EMAIL_SERVICE || 'gmail',
            username: process.env.LEAPBASE_EMAIL_USERNAME || 'test@example.com',
            password: process.env.LEAPBASE_EMAIL_PASSWORD || 'test',
            sender: process.env.LEAPBASE_EMAIL_SENDER || 'test@example.com'
        },
        analytics: {
            type: process.env.LEAPBASE_ANALYTICS_TYPE || '',
            key: process.env.LEAPBASE_ANALYTICS_KEY || ''
        }
    };
    return setting;
};

exports.hash = function(input) {
    input = input || '';
    return crypto.createHash('sha512').update(input).digest('hex');
};

exports.encrypt = function(text, key) {
    var cipher = crypto.createCipher('aes-256-cbc', key);
    var crypted = cipher.update(text,'utf8','hex');
    crypted += cipher.final('hex');
    return crypted;
};

exports.decrypt = function(input, key) {
    var decipher = crypto.createDecipher('aes-256-cbc', key)
    var dec = decipher.update(input,'hex','utf8')
    dec += decipher.final('utf8')
    return dec;
};

exports.pad = function(number, length) {
    var str = '' + number;
    while (str.length < length) {
        str = '0' + str;
    }
    return str;
};

// create an object with given prototype object
// source: Douglas Crockford - Advanced JavaScript video
exports.object = function(prototypeObject) {
    function F() {};
    F.prototype = prototypeObject;
    var newObject = new F();
    newObject._super = prototypeObject;
    return newObject;
};

exports.merge = function() {
    var result = {};
    for (var i = 0; i < arguments.length; i++) {
        for (var p in arguments[i]) {
            if (arguments[i].hasOwnProperty(p)) {
                result[p] = arguments[i][p];
            }
        }
    }
    return result;
};

// simple implementation of python string formatting
// supports: %s %03d %5.2f
// example:
//    format = 'my name is %s, age %d'
//    values = ['john', 23]
// output will be 'my name is john, age 23'
exports.format = function(format, values) {
    var pattern = /(%s|%\d*d|%\d*\.\d*f)/g;
    var pieces = format.split(pattern);
    var length = pieces.length;
    var result = []
    var matchCount = 0;
    for (var i = 0; i < length; i++) {
        if (pieces[i].match(pattern)) {
            var out = '';
            var type = pieces[i].substr(-1);
            switch (type) {
                case 'd':
                    out = values[matchCount] && parseInt(values[matchCount]);
                    if (pieces[i].substr(1,1) == '0') {
                        // for %05d, get 5 as size
                        var v = pieces[i].substr(2, pieces[i].length-1);
                        out = exports.pad(out, parseInt(v));
                    }
                    break;
                case 'f':
                    out = values[matchCount] && parseFloat(values[matchCount]);
                    break;
                case 's':
                    out = values[matchCount] && values[matchCount].toString();
                    break;
                default:
                    out = '';
            }
            result.push(out);
            matchCount = matchCount + 1;
        } else {
            result.push(pieces[i]);
        }
    }
    return result.join('');
};

exports.forceDataType = function(object, property, datatype) {
    if (typeof object[property] != 'undefined') {
        switch (datatype) {
            case 'int':
                object[property] = parseInt(object[property]);
                break;
            case 'float':
                object[property] = parseFloat(object[property]);
                break;
            case 'boolean':
                object[property] = !!object[property];
                break;
            default:
                object[property] = object[property] || null;
        }
    }
};

/**
 * collect parameter from req.params, req.body and req.query
 * req.params - route params like /user/:objectId
 * req.body - post request params via connect.bodyDecoder
 * req.query - query string like ?name=joe
 */
exports.getReqParameter = function(req) {
    var parameter = {};
    if (req.params) {
        for (var p in req.params) {
            parameter[p] = req.params[p];
        }
    }
    if (req.body) {
        for (var p in req.body) {
            parameter[p] = req.body[p];
        }
    }
    if (req.query) {
        for (var p in req.query) {
            parameter[p] = req.query[p];
        }
    }
    if (req.files) {
        for (var p in req.files) {
            parameter[p] = req.files[p];
        }
    }
    
    // enforce data type on certain parameters
    exports.forceDataType(parameter, 'skip', 'int');
    exports.forceDataType(parameter, 'limit', 'int');
    exports.forceDataType(parameter, 'start', 'int');
    exports.forceDataType(parameter, 'end', 'int');
    
    return parameter;
};

/**
 * set parameters on req.query object
 *
 */
exports.setReqParameter = function(req, parameter) {
    for (var p in parameter) {
        req.query[p] = parameter[p];
    }
};

/**
 * clear parameters on req
 */
exports.clearReqParameter = function(req) {
    req.params = {};
    req.body = {};
    req.query = {};
};

/*
query condition example:

// name = 'joe'
{'name': 'joe'}

// age > 10 and age <= 30
{'age': {'$gt':10, '$lte':30}}

// age is 1, 2 or 5
{'age': {'$in': [1, 2, 5]}}

// name starts with 'J'
{'name': /^J/}
*/
exports.getQueryCondition = function(parameter) {
    var result = {};
    if ('condition' in parameter) {
        var conditionText = parameter.condition || '{}';
        // example: /data/sample/get?condition={'age':{'$in':[1,2,5]}}
        // todo: replace eval() with safer JSON parsing
        eval('result=' + conditionText);
        //util.puts('result: ' + util.inspect(result));
    }
    return result;
};


exports.getAdhocQueryCondition = function(parameter) {
    var condition = {};
    var entries = parameter.entries || [];
    for (var i = 0; i < entries.length; i++) {
        var entry = entries[i];
        var conditionContent = exports.getConditionContent(entry);
        if (conditionContent !== null) {
            condition[entry.name] = conditionContent;
        }
    }
    return condition;
};

exports.getConditionContent = function(entry) {
    var result = null;
    if (entry.type == 'text') {
        // example: { type: 'text', name: 'name', value: 'sdf' }
        result = new RegExp(entry.value, 'gi');
    } else if (entry.type == 'number') {
        // example: {
        //    type: 'number', name: 'quantity',
        //    value: { symbol1: '$gt', value1: '1', symbol2: '$lte', value2: '5' }
        // }
        var entryValue = entry.value;
        if (entryValue.symbol1 && entryValue.value1) {
            result = result || {};
            result[entryValue.symbol1] = Number(entryValue.value1);
        }
        if (entryValue.symbol2 && entryValue.value2) {
            result = result || {};
            result[entryValue.symbol2] = Number(entryValue.value2);
        }
        // change "=" to $in
        if (entryValue.symbol1 == '$eq') {
            result = {};
            result['$in'] = [Number(entryValue.value1)];
        }
    } else if (entry.type == 'date') {
        // example: {
        //   type: 'date', name: 'examdate',
        //   value: { symbol1: '$gt', value1: '1/2/2014', symbol2: '', value2: '' }
        // }
        var entryValue = entry.value;
        var dateText = '';
        if (entryValue.symbol1 && entryValue.value1) {
            result = result || {};
            dateText = moment(entryValue.value1).format("YYYY-MM-DD HH:mm:ss");
            result[entryValue.symbol1] = new Date(dateText);
        }
        if (entryValue.symbol2 && entryValue.value2) {
            result = result || {};
            dateText = moment(entryValue.value2).format("YYYY-MM-DD HH:mm:ss");
            result[entryValue.symbol2] = new Date(dateText);
        }
        // change "=" to $in
        if (entryValue.symbol1 == '$eq') {
            result = {};
            dateText = moment(entryValue.value1).format("YYYY-MM-DD HH:mm:ss");
            result['$in'] = [new Date(dateText)];
        }
    } else if (entry.type == 'boolean') {
        // example: { type: 'boolean', name: 'examined', value: 'true' }
        result = (entry.value === 'true');
    } else if (entry.type == 'select') {
        // example: { type: 'select', name: 'category', value: [ 'digital', 'analog' ] }
        if (entry.value.length > 0) {
            result = {};
            result['$in'] = entry.value;
        }
    }
    return result;
};

/*
**Query filter**

Internally, only skip and limit are used to track range selection.  
begin, end and start parameters are converted to skip and limit  

**Parameter**

skip: number of records to be skipped.  
start: 0-based. works the same as skip parameter.  
limit: number of records to be returned.  

For a human readable format, begin and end can be used in pair
begin: 1-based. the first record to include  
end: 1-base. the last record to include  

**Example**

get 3rd, 4th, 5th, 6th records - total 4 records  
{'begin':3, 'end':6}  
{'skip':2, 'limit':4}   

skip first 5 records and return the rest  
{'skip': 5}  

skip first 5 records and return the next 10 records  
{'begin':6, 'limit':10}  
{'begin':6, 'end':15}  
{'skip':5, 'limit':10}  
{'skip':5, 'end':15}  

skip first 5 records and return the next 10 records  
sort by age in ascending order  
{'skip': 5, 'limit':10, sort: [['age', 1]]}  

**Note**

extjs uses the following filtering parameters:  
page=1&start=0&limit=10  

MongoDB supports skip and limit for easy paging.  
    db.users.find().skip(20).limit(10);
Here we skip the first 20 records, and limit our result set to 10  

**Result**

Result example:
  {skip:5, limit:10, sort:'create_by'}
  {sort:'create_by'}

*/
exports.getQueryFilter = function(parameter) {
    var result = {};
    
    // example: /data/sample/get?filter={'skip':5,'limit':2}
    if ('filter' in parameter) {
        result = JSON.parse(parameter.filter);
    }
    
    // begin and end are used in pair, converted to skip and limit
    var begin = parseInt(parameter.start) || 0;
    var end = parseInt(parameter.end) || 0;
    if (begin && end) {
        result['skip'] = begin - 1;
        result['limit'] = end - begin + 1;
    }
    
    // convert start/begin/end to skip/limit for range selection
    if ('start' in parameter) result['skip'] = parameter['start'];
    if ('skip' in parameter) result['skip'] = parameter['skip'];
    if ('limit' in parameter) result['limit'] = parameter['limit'];
    if ('sort' in parameter) result['sort'] = parameter['sort'];
    
    return result;
};

/**
 * Mixin objects into one object
 * 
 * Merge all objects passed in arguments by assigning properties and values
 * cumulatively into one object
 */
exports.mixin = function() {
    var result = {};
    for (var i in arguments) {
        if (arguments[i] && arguments[i].constructor == Object) {
            for (var p in arguments[i]) {
                result[p] = arguments[i][p];
            }
        }
    }
    return result;
};

exports.parentLinkObject = {
    parent_type: {
        type:'string',
        optional:true
    },
    parent_id: {
        type:'string',
        optional:true
    }
};

exports.stampObject = {
    create_date: {
        type: 'date',
        auto: true
    },
    create_by: {
        type: 'string',
        auto: true,
        link: 'user.username'
    },
    edit_date: {
        type: 'date',
        auto: true
    },
    edit_by: {
        type: 'string',
        auto: true,
        link: 'user.username'
    }
};

exports.base64 = {
    // encode JSON object in base64 
    encodeObject: function(object) {
        return new Buffer(JSON.stringify(object)).toString('base64');
    },
    encode: function(data) {
        return new Buffer(data).toString('base64');
    },
    // decode JSON object from base64
    decodeObject: function(text) {
        return JSON.parse(new Buffer(text, 'base64').toString());
    },
    decode: function(text) {
        return new Buffer(text, 'base64').toString();
    }
};

exports.capitaliseFirstLetter = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

exports.padLines = function(lines, padding) {
    for (var i = 0; i < lines.length; i++) {
        lines[i] = padding + lines[i];
    }
    return lines;
}

exports.stringify = function(input, replacer, spaces, padding) {
    var result = JSON.stringify(input, replacer, spaces);
    var lines = result.split('\n');
    lines = exports.padLines(lines, padding);
    return lines.join('\n');
}

