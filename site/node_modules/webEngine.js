var util = require('util');
var path = require('path');
var fs = require('fs');
var tool = require('leaptool');

module.exports = function(app) {
    
    var engine = { app: app };
    
    /**
     * Get url link to file
     *
     * file object example:
     * {
     *   name: 'dell_monitor.jpg',
     *   size: 1060,
     *   path: '74cf25869b0b969f800de436faad9d28.jpg',
     *   type: 'image',
     *   subtype: 'jpeg'
     * }
     *
     * @param {Object} file object or file name
     */
    engine.getFileUrl = function(file) {
        return util.format('%s/%s/%s', app.file_path, file.parent_type, file.path);
    };
    
    /**
     * @param {Object} file object or file name
     */
    engine.isFileExist = function(file) {
        var fullFilename = file;
        if (file.constructor === Object) {
            fullFilename = path.join(
                app.root_path, 'public', 'file', file.parent_type, file.path);
        }
        var result = fs.existsSync(fullFilename);
        app.debug(fullFilename + ' isFileExist: ' + result);
        return result;
    };
    
    engine.toInputTag = function(property, value, model, cssclass, extra) {
        var result = '';
        if (model.values) {
            result = getValuesInputTag(property, value, model, cssclass);
        } else {
            switch(model.type) {
                case 'string':
                    result = getStringInputTag(property, value, model, cssclass);
                    break;
                case 'number':
                    result = getNumberInputTag(property, value, model, cssclass);
                    break;
                case 'boolean':
                    result = getBooleanInputTag(property, value, model, cssclass);
                    break;
                case 'text':
                    result = getTextInputTag(property, value, model, cssclass);
                    break;
                case 'date':
                    result = getDateInputTag(property, value, model, cssclass);
                    break;
                case 'file':
                    result = getFileEditTag(property, value, model, cssclass);
                    result += getFileInputTag(property, value, model, cssclass);
                    break;
                case 'array':
                    result = getArrayInputTag(property, value, model, cssclass);
                    break;
                case 'object':
                    result = getObjectInputTag(property, value, model, cssclass);
                    break;
                default:
                    result = '';
            }
        }
        return result;
    };
    
    engine.toViewTag = function(property, value, model, cssclass, extra) {
        var result = '';
        if (model && model.values) {
            result = getValuesViewTag(property, value, model, cssclass);
        } else {
            switch(model && model.type) {
                case 'string':
                    result = getStringViewTag(property, value, model, cssclass);
                    break;
                case 'number':
                    result = getNumberViewTag(property, value, model, cssclass);
                    break;
                case 'boolean':
                    result = getBooleanViewTag(property, value, model, cssclass);
                    break;
                case 'text':
                    result = getTextViewTag(property, value, model, cssclass);
                    break;
                case 'date':
                    result = getDateViewTag(property, value, model, cssclass);
                    break;
                case 'file':
                    result = getFileViewTag(property, value, model, cssclass);
                    break;
                case 'array':
                    result = getArrayViewTag(property, value, model, cssclass);
                    break;
                case 'object':
                    result = getObjectViewTag(property, value, model, cssclass);
                    break;
                default:
                    result = '';
            }
        }
        return result;
    };
    
    function getStringInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        value = value || '';
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            case 'password':
                template = '<input type="password" name="%s" id="%s" value="" class="%s" />';
                result = util.format(template, property, property, cssclass);
                break;
            default:
                template = '<input type="text" name="%s" id="%s" value="%s" class="%s" />';
                result = util.format(template, property, property, value, cssclass);
        }
        return result;
    }
    
    function getStringViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '<span>';
        value = value || '';
        if (cssclass) {
            template = '<span class="' + cssclass + '">';
        }
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            case 'password':
                template += value + '</span>';
                break;
            default:
                template += value + '</span>';
        }
        result = template;
        return result;
    }
    
    function getBooleanInputTag(property, value, model, cssclass) {
        var values = [
            { display:'True', value:true, default:true },
            { display:'False', value:false }
        ];
        var options = [];
        var template = '<input type="radio" name="%s" value="%s" %s />';
        for (var i in values) {
            var checkedValue = '';
            if (value === '') {
                if (values[i].default === true) {
                    checkedValue = 'checked="true"';
                }
            } else {
                if (value === values[i].value) {
                    checkedValue = 'checked="true"';
                }
            }
            var tag = util.format(template, property, values[i].value, checkedValue);
            tag += ' ' + values[i].display;
            options.push(tag);
        }
        return options.join('<br/>');
    }
    
    function getBooleanViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '<span>';
        if (cssclass) {
            template = '<span class="' + cssclass + '">';
        }
        template += (value ? 'True' : 'False') + '</span>';
        result = template;
        return result;
    }
    
    function getNumberInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        value = value || '';
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            default:
                template = '<input type="text" name="%s" id="%s" value="%s" class="%s" />';
                result = util.format(template, property, property, value, cssclass);
        }
        return result;
    }
    
    function getNumberViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '<span>';
        if (cssclass) {
            template = '<span class="' + cssclass + '">';
        }
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            default:
                template += value + '</span>';
        }
        result = template;
        return result;
    }
    
    function getTextInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        value = value || '';
        var type = model.type || '';
        var subtype = model.subtype && model.subtype.type || '';
        var typeclass = type + '_' + subtype;
        template = '<textarea name="%s" id="%s" class="%s %s" rows=10 >%s</textarea>';
        result = util.format(template, property, property, typeclass, cssclass, value);
        return result;
    }
    
    function getTextViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        value = value || '';
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            case 'html':
                template = '<span class="%s">%s</span>';
                result = util.format(template, cssclass, value);
                break;
            case 'text':
                template = '<span class="%s">%s</span>';
                value = value.replace(/\r?\n/g, '<br/>');
                result = util.format(template, cssclass, value);
                break;
            default:
                template = '<span class="%s">%s</span>';
                result = util.format(template, cssclass, value);
        }
        return result;
    }
    
    function getDateInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        value = value || '';
        var subtype = model.subtype && model.subtype.type || '';
        if (value && value.constructor == Date) {
            switch(subtype) {
                case 'date':
                    value = value && value.toLocaleDateString();
                    break;
                case 'time':
                    value = value && value.toLocaleTimeString();
                    break;
                default:
                    value = value && value.toString();
            }
        }
        
        template = '<input type="text" name="%s" id="%s" class="%s" value="%s" />';
        result = util.format(template, property, property, cssclass, value);
        return result;
    }
    
    function getDateViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        var subtype = model.subtype && model.subtype.type || '';
        
        if (value && value.constructor == Date) {
            switch(subtype) {
                case 'date':
                    value = value && value.toLocaleDateString();
                    break;
                case 'time':
                    value = value && value.toLocaleTimeString();
                    break;
                default:
                    value = value && value.toString();
            }
        }
        template = '<span class="%s">%s</span>';
        result = util.format(template, cssclass, value);
        return result;
    }
    
    function getFileInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        var subtype = model.subtype && model.subtype.type || '';
        
        template = '<input type="file" name="%s" id="%s" class="%s" />';
        result = util.format(template, property, property, cssclass);
        return result;
    }
    
    function getFileEditTag(property, files, model, cssclass) {
        var result = '';
        var template = '<a href="%s">%s</a>';
        if (files && files.length > 0) {
            for (var i = 0; i < files.length; i++) {
                var fileUrl = engine.getFileUrl(files[i]);
                result += '<input type="checkbox" checked="checked"' +
                    'name="__FILEMOD__' + property + '__' + i + '" ' +
                    'value="' + files[i].path + '" /> ' +
                    util.format(template, fileUrl, files[i].name) + '<br>';
            }
        }
        return result;
    }
    
    function getFileViewTag(property, value, model, cssclass) {
        var files = value;
        var subtype = model.subtype && model.subtype.type || '';
        var template = '<tr><td><a href="%s">%s</a></td></tr>';
        var result = '<table>';
        if (files) {
            for (var i = 0; i < files.length; i++) {
                var fileUrl = engine.getFileUrl(files[i]);
                result += util.format(template, fileUrl, files[i].name);
            }
        }
        result += '</table>';
        return result;
    }
    
    function getArrayInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            case 'file':
                template = '<input type="file" name="%s" id="%s" class="%s" multiple="" />';
                result = getFileEditTag(property, value, model, cssclass);
                value = '';  // clear value so it is not included again in template
                break;
            case 'object':
                template = '<textarea name="%s" id="%s" class="%s" rows=10 >%s</textarea>';
                value = JSON.stringify(value, null, 4);
                break;
            default:
                template = '<textarea name="%s" id="%s" class="%s" rows=10 >%s</textarea>';
                value = value ? value.join(',') : '';
        }
        /*
        if (subtype == 'file') {
            result = getFileEditTag(property, value, model, cssclass);
            value = '';  // clear value so it is not included again in template
        } else {
            value = value ? value.join(',') : '';
        }
        */
        result += util.format(template, property, property, cssclass, value);
        return result;
    }
    
    function getArrayViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        var subtype = model.subtype && model.subtype.type || '';
        switch (subtype) {
            case 'file':
                result = getArrayFileViewTag(property, value, model, cssclass);
                break;
            case 'object':
                value = JSON.stringify(value, null, 4);
                template = '<span class="%s">%s</span>';
                result = util.format(template, cssclass, value);
                break;
            default:
                template = '<span class="%s">%s</span>';
                result = util.format(template, cssclass, value);
        }
        return result;
    }
    
    function getArrayFileViewTag(property, files, model, cssclass) {
        var template = '<tr><td><a href="%s">%s</a></td></tr>';
        var result = '';
        if (files) {
            result = '<table>';
            for (var i = 0; i < files.length; i++) {
                var fileUrl = engine.getFileUrl(files[i]);
                result += util.format(template, fileUrl, files[i].name);
            }
            result += '</table>';
        }
        return result;
    }
    
    function getObjectInputTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        var subtype = model.subtype && model.subtype.type || '';
        if (!value) {
            value = '';
        }
        switch(subtype) {
            case 'json':
                template = '<textarea name="%s" id="%s" class="%s" rows=12 >%s</textarea>';
                break;
            default:
                template = '<textarea name="%s" id="%s" class="%s" rows=12 >%s</textarea>';
        }
        if (subtype == 'file') {
            result = getFileEditTag(property, value, model, cssclass);
        }
        if (typeof value == 'object' && value) {
            value = JSON.stringify(value, null, 4);
        }
        result += util.format(template, property, property, cssclass, value);
        return result;
    }
    
    function getObjectViewTag(property, value, model, cssclass) {
        var result = '';
        var template = '';
        var subtype = model.subtype && model.subtype.type || '';
        if (value) {
            if (subtype == 'json') {
                value = JSON.stringify(value, null, 4);
            }
        } else {
            value = '';
        }
        if (cssclass) {
            template = '<pre class="%s">%s</pre>';
            result = util.format(template, cssclass, value);
        } else {
            template = '<pre>%s</pre>';
            result = util.format(template, value);
        }
        
        return result;
    }
    
    function getValuesInputTag(property, value, model, cssclass) {
        var values = model.values;
        var options = [];
        var template = '<input type="radio" name="%s" value="%s" %s />';
        for (var i in values) {
            var checkedValue = '';
            if (value === '') {
                if (values[i].default === true) {
                    checkedValue = 'checked="true"';
                }
            } else {
                if (value == values[i].value) {
                    checkedValue = 'checked="true"';
                }
            }
            var tag = util.format(template, property, values[i].value, checkedValue);
            tag += ' ' + values[i].display;
            options.push(tag);
        }
        return options.join('<br/>');
    }
    
    function getValuesViewTag(property, value, model, cssclass) {
        var values = model.values;
        var display = '';
        var template = '<span class="%s">%s</span>';
        for (var i in values) {
            if (value == values[i].value) {
                display = values[i].display;
            }
        }
        var result = util.format(template, cssclass, display);
        return result;
    }
    
    engine.castData = function(input, model) {
        var result = '';
        //var subtype = model.subtype && model.subtype.type || '';
        switch(model.type) {
            case 'string':
                result = castStringData(input, model);
                break;
            case 'number':
                result = parseFloat(input) || 0;
                break;
            case 'boolean':
                result = castBooleanData(input, model);
                break;
            case 'text':
                result = input || '';
                break;
            case 'date':
                result = castDateData(input, model);
                break;
            case 'array':
                result = castArrayData(input, model);
                break;
            case 'file':
                input = input || [];
                if (input.constructor.name == 'Array') {
                    result = input;
                } else {
                    result = [input];
                }
                break;
            case 'object':
                result = castObjectData(input, model);
                break;
            case 'sequence':
                result = input;
            default:
                result = input;
        }
        return result;
    };
    
    /**
     * To use random or uuid subtype, leave input value as blank
     */
    function castStringData(input, model) {
        input = input || '';
        var result = '';
        var subtype = model.subtype && model.subtype.type || '';
        // if input has value, keep its value
        if (input) {
            result = input;
        } else {
            switch(subtype) {
                case 'random':
                    result = Math.floor(Math.random() * 100000000);
                    break;
                case 'uuid':
                    result = require('node-uuid').v4().replace(/-/g, '');
                    break;
                default:
                    result = input;
            }
        }
        return result;
    }
    
    function castBooleanData(input, model) {
        var result = false;
        if (/true|yes/i.exec(input)) {
            result = true;
        }
        return result;
    }
    
    function castArrayData(input, model) {
        input = input || [];
        var result = '';
        var subtype = model.subtype && model.subtype.type || 'string';
        
        if (input.constructor.name == 'Array') {
            result = input;
        } else {
            switch(subtype) {
                case 'file':
                    result = [input];
                    break;
                case 'string':
                    if (input.constructor.name == 'String') {
                        result = tool.toArray(input);
                    } else {
                        result = [input];
                    }
                    break;
                case 'number':
                    if (input.constructor.name == 'String') {
                        var output = tool.toArray(input);
                        var result = [];
                        for (var i in output) {
                            result.push(parseFloat(output[i]));
                        }
                    } else {
                        result = [input];
                    }
                    break;
                case 'object':
                    result = castObjectData(input, model.subtype);
                    break;
                default:
                    result = input;
            }
        }
        return result;
    }
    
    function castObjectData(input, model) {
        var result = null;
        var subtype = model.subtype && model.subtype.type || 'mixed';
        switch(subtype) {
            case 'json':
                result = null;
                try {
                    if (input && typeof input == 'object') {
                        result = input;
                    } else if (input) {
                        result = JSON.parse(input);
                    }
                } catch (e) {
                    app.error('ERROR in castObjectData: ' + e);
                    result = null;
                }
                break;
            case 'mixed':
                result = input;
                break;
            default:
                result = input;
        }
        return result;
    }
    
    function castDateData(input, model) {
        var result = null;
        var subtype = model.subtype && model.subtype.type || '';
        switch(subtype) {
            case 'time':
                if (new Date(input) == 'Invalid Date') {
                    // example: 9:50 or 7:30 PM
                    input = '1/1/1970 ' + input; // add fixed date
                    result = new Date(Date.parse(input));
                } else {
                    result = new Date(input);
                }
                break;
            default:
                result = input && new Date(Date.parse(input));
        }
        return result;
    }
    
    return engine;
}