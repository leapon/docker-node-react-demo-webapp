var util = require('util');
var fs = require('fs');
var path = require('path');
var async = require('async');
var tool = require('leaptool');

module.exports = function(app, moduleName) {

    var block = {};
    
    block.getWeb = function(req, res) {
        var callback = arguments[3] || null;
        var parameter = tool.getReqParameter(req);
        var condition = tool.getQueryCondition(parameter);
        var filter = tool.getQueryFilter(parameter);
        block.get(req, res, condition, filter, callback);
    };
    
    block.get = function(req, res, condition, filter, callback) {
        app.db.find(moduleName, condition, filter, function(error, docs, info){
            app.cb(error, docs, info, req, res, callback);
        });
    };
    
    block.getCountWeb = function(req, res) {
        var callback = arguments[3] || null;
        var parameter = tool.getReqParameter(req);
        var condition = tool.getQueryCondition(parameter);
        var filter = tool.getQueryFilter(parameter);
        block.getCount(req, res, condition, filter, callback);
    };
    
    block.getCount = function(req, res, condition, filter, callback) {
        app.db.findCount(moduleName, condition, filter, function(error, docs, info){
            app.cb(error, docs, info, req, res, callback);
        });
    };
    
    block.getByIdWeb = function(req, res) {
        var callback = arguments[3] || null;
        var parameter = tool.getReqParameter(req);
        var id = parameter.id;
        block.getById(req, res, id, callback);
    };
    
    block.getById = function(req, res, id, callback) {
        var condition = { _id: id };
        var filter = {};
        app.db.find(moduleName, condition, filter, function(error, docs, info){
            app.cb(error, docs, info, req, res, callback);
        });
    };
    
    block.addWeb = function(req, res) {
        var callback = arguments[3] || null;
        var parameter = tool.getReqParameter(req);
        block.add(req, res, parameter, callback);
    };
    
    block.add = function(req, res, doc) {
        var callback = arguments[3] || null;
        app.db.add(moduleName, doc, function(error, docs, info) {
            app.cb(error, docs, info, req, res, callback);
        });
    };
    
    block.editWeb = function(req, res) {
        var callback = arguments[3] || null;
        var parameter = tool.getReqParameter(req);
        block.edit(req, res, parameter, callback);
    };
    
    block.edit = function(req, res, parameter) {
        var callback = arguments[3] || null;
        var model = app.module[moduleName].model;
        var id = parameter._id || parameter.id;
        // process the input document
        var inputDoc = {};
        for (var property in model) {
            if (parameter.hasOwnProperty(property)) {
                var value = app.engine.castData(parameter[property], model[property]);
                inputDoc[property] = value;
            }
        }
        app.db.findById(moduleName, id, function(error, doc, info) {
            if (!doc) {
                error = new Error('no doc found for id=' + id);
                app.cb(error, [], info, req, res, callback);
                return;
            }
            for (var property in model) {
                if (property === 'edit_by') {
                    //doc[property] = loginUser;
                } else if (property === 'edit_date') {
                    //doc[property] = tool.getDate();
                } else if (parameter.hasOwnProperty(property)) {
                    var type = model[property].type;
                    var subtype = model[property].subtype;
                    subtype = subtype && subtype.type;
                    if (type == 'string' && subtype == 'password') {
                        var saltValue = doc.salt || '';
                        doc[property] = tool.hash(parameter[property] + saltValue);
                    } else {
                        var value = app.engine.castData(parameter[property], model[property]);
                        doc[property] = value;
                    }
                }
            }
            app.db.updateById(moduleName, id, doc, function(error, docs, info) {
                app.cb(error, docs, info, req, res, callback);
            });
        });
    };
    
    return block;
    
};