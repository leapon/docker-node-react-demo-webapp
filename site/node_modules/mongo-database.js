var util = require('util');
var tool = require('leaptool');
var mongoDb = require('mongodb');
var ObjectID = mongoDb.ObjectID;
var async = require('async');

Database = function(app, callback) {
    this.app = app;
    var host = app.setting.database.host;
    var port = app.setting.database.port;
    this.dbname = app.setting.database.name;
    //console.log('db:', host, port, this.dbname);
    
    var mongoServer = new mongoDb.Server(host, port, { auto_reconnect: true }, {});
    this.db = new mongoDb.Db(this.dbname, mongoServer, { safe: false });
    this.db.open(function(error, db) {
        if (error) {
            util.puts("\nCan't connect to MongoDB @" + host + ':' + port);
        } else {
            callback && callback();
        }
    }.bind(this));
};


Database.prototype.createTables = function(callback) {
    var db1 = this.db;
    var moduleNameArray = [];
    
    for (var name in this.app.module) {
        if (this.app.module[name].model) {
            moduleNameArray.push(name);
        }
    }

    async.forEachSeries(moduleNameArray, clearModule, function(){
        // done.
        callback && callback();
    });

    function clearModule(moduleName, callback) {
        db1.collection(moduleName, function(error, collection) {
            console.log('removing ' + moduleName);
            collection.remove(function(err, numberOfRemovedDocs) {
                //console.log(numberOfRemovedDocs);
                callback && callback();
            });
        });
    }
};


Database.prototype.openTable = function(table, callback) {
    this.db.collection(table, function(error, collection) {
        var info = {};
        callback && callback(error, collection, info);
    });
};

/**
 * Treat condition object for use in mongoDB query
 *
 * if property is _id and value is string, convert value to ObjectID
 */
Database.prototype.treatCondition = function(condition) {
    for (var property in condition) {
        if (property == '_id' && typeof condition[property] == 'string') {
            condition[property] = ObjectID.createFromHexString(condition[property]);
        }
    }
    return condition;
};

Database.prototype.add = function(table, docs, callback) {
    //this.app.debug('db add - table:' + table);
    this.openTable(table, function(error, tableObject, info) {
        if (error) {
            callback && callback(error, null, {success: false});
        } else {
            if (typeof(docs.length)=="undefined") {
                docs = [docs];
            }
            // for _id file, need to convert to ObjectID type
            for (var i in docs) {
                var doc = docs[i];
                doc._class = table;
                if (doc._id && typeof doc._id === 'string') {
                    doc._id  = ObjectID.createFromHexString(doc._id);
                }
            }
            tableObject.insert(docs, {safe:true}, function(error, docs) {
                info = {success: !error};
                callback && callback(error, docs, info);
            });
        }
    });
};

/**
 * Generic search function
 *
 * condition example: { 'age': {'$gt':10, '$lte':30}, 'name': /^J/ }
 * filter example:
 *   { 'skip': 5, 'limit':10, sort: [['age', 1]] }
 *   { 'sort': {name:1, age:-1} } //sort by name ascending, then age descending
 */
Database.prototype.find = function(table, condition, filter, callback) {
    //this.app.debug('db find - table:' + table);
    condition = this.treatCondition(condition);
    this.openTable(table, function(error, tableObject, info) {
        if (error) {
            callback(error, null, {success: false});
        } else {
            tableObject.find(condition, filter, function(error, cursor) {
                if (error) {
                    callback(error, null, {success: false});
                } else {
                    cursor.count(function(error, count){
                        if (error) {
                            callback(error, null, {success: false});
                        } else {
                            cursor.toArray(function(error, docs) {
                                info = { total: count, module: table, filter:filter };
                                callback(error, docs, info);
                            });
                        }
                    });
                }
            });
        }
    });
};

Database.prototype.findCount = function(table, condition, filter, callback) {
    //this.app.debug('db find - table:' + table);
    condition = this.treatCondition(condition);
    this.openTable(table, function(error, tableObject, info) {
        if (error) {
            callback(error, null, {success: false});
        } else {
            tableObject.find(condition, filter, function(error, cursor) {
                if (error) {
                    callback(error, null, {success: false});
                } else {
                    cursor.count(function(error, count){
                        if (error) {
                            callback(error, null, {success: false});
                        } else {
                            info = { total: count, module: table };
                            callback(error, [], info);
                        }
                    });
                }
            });
        }
    });
};

Database.prototype.findOne = function(table, condition, callback) {
    //this.app.debug('db findOne - table:' + table);
    condition = this.treatCondition(condition);
    this.openTable(table, function(error, tableObject) {
        tableObject.findOne(condition, function(error, doc){
            var info = {success: !error};
            callback && callback(error, doc, info);
        });
    });
};

Database.prototype.findById = function(table, id, callback) {
    //this.app.debug(util.format('db findById - table:%s, id:%s', table, id));
    var condition = { _id: id + '' };
    condition = this.treatCondition(condition);
    this.findOne(table, condition, function(error, doc) {
        if (doc == null) {
            error = new Error('Can not find ' + table + ' id=' + id);
        }
        var info = {success: !error};
        callback && callback(error, doc, info);
    });
};

Database.prototype.findByIds = function(table, ids, callback) {
    //this.app.debug(util.format('db findByIds - table:%s, ids:%s', table, ids));
    // create query condition object from ids
    var idList  = [];
    for (var index in ids) {
        idList.push({ _id: ObjectID.createFromHexString(ids[index] + '') });
    }
    var condition = { $or: idList};
    var filter = {};
    this.find(table, condition, filter, function(error, docs) {
        if (docs == null) {
            error = new Error('Can not find ' + table + ' ids=' + ids);
        }
        var info = {success: !error};
        callback && callback(error, docs, info);
    });
};

/**
 * Get distinct values for a field
 * MongoDB specific
 * condition example: {'age': {'$gt':10, '$lte':30}}
 */
Database.prototype.findDistinct = function(table, field, condition, callback) {
    condition = this.treatCondition(condition);
    this.openTable(table, function(error, tableObject, info) {
        if (error) {
            callback(error, null, {success: false});
        } else {
            tableObject.distinct(field, condition, function(error, docs) {
                if (error) {
                    callback(error, null, {success: false});
                } else {
                    var count = docs && docs.length || 0;
                    info = { total: count, module: table, field: field };
                    callback(error, docs, info);
                }
            });
        }
    });
};

/**
  Comment from node-mongodb-native source code
  Collection.prototype.update = function(spec, document, options, callback)
  
  Update a single document in this collection.
    spec - a associcated array containing the fields that need to be present in
      the document for the update to succeed

    document - an associated array with the fields to be updated or in the case of
      a upsert operation the fields to be inserted.

  Options:
    upsert - true/false (perform upsert operation)
    multi - true/false (update all documents matching spec)
    safe - true/false (check if the operation failed, required extra call to db)
**/
Database.prototype.updateById = function(table, id, object, callback) {
    if (typeof id != 'string') {
        id = '' + id;
    }
    //this.app.debug(util.format('db updateById - table:%s, id:%s', table, id));
    this.openTable(table, function(error, tableObject) {
        if (error) {
            callback(error, null, {success: false});
        } else {
            id = id + '';  // convert to string if id is number
            var condition = { _id: ObjectID.createFromHexString(id) };
            tableObject.update(condition, object, {upsert: false},
                function(error, docs){
                    var info = {success: !error};
                    callback && callback(null, [object], info);
                }
            );
        }
    });
};

Database.prototype.deleteById = function(table, id, callback) {
    //this.app.debug(util.format('db deleteById - table:%s, id:%s', table, id));
    this.deleteByIds(table, [id], callback);
};

Database.prototype.deleteByIds = function(table, ids, callback) {
    //this.app.debug(util.format('db deleteByIds - table:%s, ids:%s', table, ids));
    this.openTable(table, function(error, tableObject) {
        if (error) {
            callback && callback(error, null, {success: false});
        } else {
            var idList  = [];
            for (var index in ids) {
                var id = ids[index] + '';  // convert to string if id is number
                idList.push({_id: ObjectID.createFromHexString(id)});
            }
            var condition = { $or: idList}; 
            tableObject.remove(condition, function(error, docs){
                    var info = {success: !error};
                    callback && callback(error, docs, info);
                }
            );
        }
    });
};

Database.prototype.deleteBy = function(table, condition, callback) {
    //this.app.debug(util.format('db delete - table:%s, condition:%s', table, condition));
    this.openTable(table, function(error, tableObject) {
        if (error) {
            callback && callback(error, null, {success: false});
        } else {
            tableObject.remove(condition, function(error, docs){
                    var info = {success: !error};
                    callback && callback(error, docs, info);
                }
            );
        }
    });
};

Database.prototype.deleteAll = function(table, callback) {
    //this.app.debug(util.format('db deleteAll - table:%s', table));
    this.openTable(table, function(error, tableObject) {
        if (error) {
            callback && callback(error, null, {success: false});
        } else {
            tableObject.remove(function(error, docs){
                var info = {success: !error};
                callback && callback(error, docs, info);
            });
        }
    });
};

// convert id to string format
Database.prototype.getStringId = function(id) {
    if (typeof id === 'object') {
        id = id.toString();
    }
    return id;
};

module.exports = Database;